June 5th 
Software engennerring:  -software is everwhere
    -it's mostly crap
    -it cost all of us an incredible amount of time and therefore expensive

Not a problem:  -it makes a lot of money
    - it's better than digging holes
    - it can be fun

* close source software is like a cathidrol where it takes time and a lot of money to complete
* open source software is like the oposite you create it for yourself, like github
* whats up and we chat are the two biggest messeging apps in the world, whats up was made up by  people and it was sold to fb for billion $

Software is complex:
    - Software is crazy complex, bowing (air plane software) took  people,  huors a week,  weeks per month
    - as time goes by the programs become more complecated some programs take  millions lines of complecated
    - write as a little as code as possible
    - writee as little as code as you can, when we stop writting code than we are done
    - java was originally used for hot top boxes like microwaves and things that would never need an update
    - C++ is a terrible for programming 
    - You cant handle the complexity
    - the magic number seven, plus or minus 2: some limits on our capacity.

    - The human brain can only keep track of 7 things at the time i our active memory
Why 7: - optimized brain capacity because early hunting parties were that big 
    - we need to make sure that the profgram we are writting has 7 or fewer things going on, of there are more than you dont know what is going on
    - we are in about the same level on complexity as small living creatures as mouse, a wow npc has the same iq as a mouse (5)

What's the problem: - Mariner 1, a 500 mil space craft was lost in space before we even got to use it
    - they used a different math symbal and not the correct one and they didn't run test and therefore it became lost
    - Therac 25, a radiation mechine that was made to treat cancer. in 1987 a couple of people was exposed to too much radiation due to a misfunction in the software and killed about 6 people to overduce of radiation
    - Ariane 5, a rocket that was used, used the same code as the ariane 4 and because of this it wasn't up to date and made it explode right after it took off because it was faster and bigger than the ariane 4
    - stuxnet is a computer worm discovered in june 2010 that is belived to have been created by the United States and Israeli agenncies to attack Iran's nuclear facilities. Stuxnet initially spreads via microsoft windows, and targets Siemens industrial control systems
    - 

********************************************************************************
                                            June 6th Notes

DIA:    - 88 airport gates in 3 concourses
    - 17 miles of tracks and 5 miles of conveyyor belts
    - they just hvae a lot of things being a huge airport
    - All this stuff and thye are 16 months past its hard deadline
    - its costing the city 560 million over budget
    - the automative convairebelt is so bad they took it out and are using physical carts for luggage and its costing them a lot of money
    - turns out the software is very bad its terrible 
    
Chaos 1995: - 31% of projects will be canceled before they ever get completed, mostly software projects
    - american companies and government agencis will spend 81 million on software projects
    - The average is only 16.2% for software projects that are completed on-time and on-budget 
    - In the larger companies, the news is even worse: only 9% of their projects come in on-time and on budget 
    - Projects completed by the largest american compaines have only approximately 42% of the originally-proposedfeatures and functions
    - Smaller compies tend to do a lot better than major larger companies
No Silver Bullet:
    - There is no single development, in either technology or management technique, which by itself promises even one order of magnitude improvement within a decade in productivity, in reliability, in symphathy 
    - We dont need to create a new calculator, or a new tic tiok game, we need to create new things, all the easy stuff is already done
Engineering:
    - software engineering is the study and an application of engineering to the design, development, and maintenance of software
Margaret Hamilton:
    - She helped a lot in the involvement in apollo 11, she did exclusive testing which lead to a succesfull launch of apollo 11
Terminology: 
    - statements that define and quantify what the program needs todo
    - the work requirments isn't used in the same way as elsewhere
    - Software rewuirments tend to be negotiable
Functional requirments: 
    - what a program needs to do 
    - tends to be yes or no
Non-Functional requirments: 
    - The manner in which the functional requirements needs to be achived 
    - Performance, usability, maintainability 
    - Tend to be on a scale (htting the right code coverage)
Design contraints: 
    - statements the constrain the ways in which the software can be designed and implemented
    - Platform, language, DB, Webapp, GUI, etc. 

********************************************************************************
June 10th
Local respository (repo):
    - Local Git comandes:
        - git init: initializes local repository, In command pallet: Git init
        - git branch: create a new branch/version or copy, command pallet: Git branch/
        - git add: add a file/change to the staging area, Command pallet: Git add/ stage
        - git commit: commit changes (from stages) "commit message what the change is"
        - git merge: merge a branch into a target branch, CP: Git merge
        - git checkout: switch to a branch, CP: Git checkout
    - These are local git commands where no internet is needed to use
    - if I want to add a branch from my offline repo into the online/group repo than you would have to change into develope option and then merge the offline branch into the online branch

Git Hub:
    - git hub is a server that host copy of your repositories, it is just used to get remote repositories,
    - branch protection: don't push into master you should pull and push request into the master branch
    - pull request is the same as merge that is only avalible on git hub, when you do a pull request you need to include what it is/*name of branch* --what it is
    - it will not let you merge until a review is met and tests are passed, this is for group and reviews are done by our LAs
    - Push: send your updated branch into your online repo, Pull: takes whats ever in your online repo and brings it to your local repo
    - A pull request is only a git hub feature only
    - Work Flow: don't push to master, first you should push to feature branch and then to dev branch, master branch is the last branch that should be pushed to
    - To go into master it need to pass travis and sonar with at least 95%, has to meet the definition of done, and it has to RUN!!

Graphs:
    - How to use graphs:- networks/network topologies
                        - advance math
                        - functional programming
                        - machine learning - neural networks
                        - graph databases
Trypes of graphs: -Weighted and unweighted graphs:
                            - weighted, edges have 

    - directed and undirected graphes: - directed, you can only move along an edge in one direction
                                        - undirected, you can move along an edge in both directions
typical Graph functions: - add/remove vertex
                        - add/remove edge
                        - weighted?
                        - directed?
                        - Is conected? Given and vertex, can you get to any other vertex through legal edge movement
                        - can every vertex reach  every othe rvertex through a single edge traversal
                        - Does a path exists?
                            - does at least one path exist, find the shortest path from one vertex tot he other
                            - if a path between two vertices exist, find the shortest path from one vertex to the other
How we represent graphs: - List of linked lists
                        - each vertex is the head of a linked list (or a list, array , etc)
                            - the linked list holds their edges (and weights, if they exist)
                        - Matrix of vertices:
                            - row and column titles are the vertices
                            - row-column indices are edge weights (or edge existance)
                        - List vs matrix: - List: more common, usually easier to visialize/conceptualize, adding edges is slow, many algorithms are slow or very individualized
                            - Matrix: most algorithms are extremely fast in comparison, searches and traversals very mathematical, adding vertices is slow
                        - Library: - nextwork X (http//networkx.github.io/)
                            - graphs, digraphs, multigraphs
                            - well tested (>90% coverage)
                            - very 00 compliant

********************************************************************************
                                June 12th
What I did since last time:
    -I went on networkX webcite and went over the network package, more psecificly how to set up graphs with nodes and edges and how networks would be set up usinf them
    -I also continued reading 5 dysfunctions of a team, about half way done with the book

What I will do for next time:
    -I will start working on our trello task once those are finished being set up
    -I will also continues reading 5 dysfunctions, trying to finish that by the weekend

Blockers:
    -The API isnt out yet and because of that we aren't sure what we should start programming, hopefully the API will soon be released that way we are able to start working on things

Python notes:
    -A dictionary is a key value term, python is a multiple dictionary 
    -Python allows method refrences, thye are considered first class objects/ vakues
    -example the key word is "GO"  and the value would be food, once the key matches the value then it does something
        * EX; {"go", food}
             -{"Move", food}
    -When looking for a language look up why that language was made for, it will help you out a lot more and make everything a lot better. 
    -

Non-functional requirement Examples
    -Performance
    -Real-time Performance
    -maintainability
        *readability
        *modualaritiy
        *debugability

Analysis:
    -Static; analyzing the (non running) code
        *Linters, cyclomatic complexity, method length, etc
        *Pylint, sonar cloud, radon, checkstyle

    -Dynamic; analyzing a running program
        *spotbug, valgrind, purify

Testing:
    -Acceptance; the customer saying this is what we asked for, when the requirments are met
    -Unit: method; test driven programs, write a test first and then the functunality, if you cant test your code then how are you writting your code
        -write just enough code for it to pass (TDD), write a test then write the code that passes that test, that you know what kind of code you are writting 
    -intergration: class; this is when you test the whole class, once we know the method works we have to check and make sure the whole class works and passes the test
    -system; 

Unit Test:
    -Arguably the most important
    -many modern SE methods use"test first"
        -write a test
        -make sure it fails 
        -write just enough code to make sure it works
    -if you don't know how to test it, how can you write it
    -correct frame of mind 
    -Test-Driven 

Implementation
    -SE tends to focus on requirments, design and processes
    -a bad implementation will ruin everything else 

Guidelline: style
    -E.G.: The elements of java style by scott amber and trevor misfeldt
    management and leadership are 2 crutial for the indoustry 
    book recommendation good the great 

Guideline: naming
    -Use good descriptive names
    - Probably not hungarian notation
        -crszkvc 30lastNameCol: a constant refrence argument, holding the contents of a database column LastName of type varchar(30) which is part of the tables primary key
        -type checking now done by IDE and compiler   

Guideline: test:
    -every method has unit test
    -Test must be easy to run and run a lot
        -E.g.: unit
    -TDD

Guideline: use libraries
    -Developed and tested by many others
    -Don't re implementation
        -you need to learn what is possible
        -yes, you may know how and think you're better, but you're not
        -Write something that no one else has written

Guideline: reviews
    -code reviews are very effective for improving quality
    -Knowing that someone else will be looking affects you
    -other things you don't know

Guidelines
    -We'll be covering other guidelines such as DRY, YAGNI, SOLID, Liskov substitution principle, etc.
    -Don't ever repeat code,

Agile:
    -Many different process that emphasize short release cycles and that allow changes in design
    -Focus on human and term aspects
    -Change is always inveritable, because code changes all the time 
    -short releases and iterations
    -incremental designUser involvement
    -lightweight documentation 
    -infromal communication 
    -change 
    -Give users the least amount of functionality and twords the end they will seee how much it grows and will be happier
    -Dont ever say im sorry, when the user changes their mind you say yes and... your change is going to have this affect 
    

