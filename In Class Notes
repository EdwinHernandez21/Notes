June 5th 
Software engennerring:  -software is everwhere
    -it's mostly crap
    -it cost all of us an incredible amount of time and therefore expensive

Not a problem:  -it makes a lot of money
    - it's better than digging holes
    - it can be fun

* close source software is like a cathidrol where it takes time and a lot of money to complete
* open source software is like the oposite you create it for yourself, like github
* whats up and we chat are the two biggest messeging apps in the world, whats up was made up by  people and it 
was sold to fb for billion $

Software is complex:
    - Software is crazy complex, bowing (air plane software) took  people,  huors a week,  weeks per month
    - as time goes by the programs become more complecated some programs take  millions lines of complecated
    - write as a little as code as possible
    - writee as little as code as you can, when we stop writting code than we are done
    - java was originally used for hot top boxes like microwaves and things that would never need an update
    - C++ is a terrible for programming 
    - You cant handle the complexity
    - the magic number seven, plus or minus 2: some limits on our capacity.

    - The human brain can only keep track of 7 things at the time i our active memory
Why 7: - optimized brain capacity because early hunting parties were that big 
    - we need to make sure that the profgram we are writting has 7 or fewer things going on, of there are more 
    than you dont know what is going on
    - we are in about the same level on complexity as small living creatures as mouse, a wow npc has the 
    same iq as a mouse (5)

What's the problem: - Mariner 1, a 500 mil space craft was lost in space before we even got to use it
    - they used a different math symbal and not the correct one and they didn't run test and therefore it 
    became lost
    - Therac 25, a radiation mechine that was made to treat cancer. in 1987 a couple of people was exposed 
    to too much 
    radiation due to a misfunction in the software and killed about 6 people to overduce of radiation
    - Ariane 5, a rocket that was used, used the same code as the ariane 4 and because of this it wasn't up 
    to date and made it 
    explode right after it took off because it was faster and bigger than the ariane 4
    - stuxnet is a computer worm discovered in june 2010 that is belived to have been created by the United 
    States and Israeli 
    agenncies to attack Iran's nuclear facilities. 
    Stuxnet initially spreads via microsoft windows, and targets Siemens industrial control systems
    - 

********************************************************************************
                                            June 6th Notes

DIA:    - 88 airport gates in 3 concourses
    - 17 miles of tracks and 5 miles of conveyyor belts
    - they just hvae a lot of things being a huge airport
    - All this stuff and thye are 16 months past its hard deadline
    - its costing the city 560 million over budget
    - the automative convairebelt is so bad they took it out and are using physical carts for luggage and its 
    costing them a lot of money
    - turns out the software is very bad its terrible 
    
Chaos 1995: - 31% of projects will be canceled before they ever get completed, mostly software projects
    - american companies and government agencis will spend 81 million on software projects
    - The average is only 16.2% for software projects that are completed on-time and on-budget 
    - In the larger companies, the news is even worse: only 9% of their projects come in on-time and on budget 
    - Projects completed by the largest american compaines have only approximately 42% of the originally-proposedfeatures 
    and functions
    - Smaller compies tend to do a lot better than major larger companies
No Silver Bullet:
    - There is no single development, in either technology or management technique, which by itself promises even 
    one order of magnitude improvement within a decade in productivity, in reliability, in symphathy 
    - We dont need to create a new calculator, or a new tic tiok game, we need to create new things, all the 
    easy stuff is already done
Engineering:
    - software engineering is the study and an application of engineering to the design, development, and 
    maintenance of software
Margaret Hamilton:
    - She helped a lot in the involvement in apollo 11, she did exclusive testing which lead to a succesfull 
    launch of apollo 11
Terminology: 
    - statements that define and quantify what the program needs todo
    - the work requirments isn't used in the same way as elsewhere
    - Software rewuirments tend to be negotiable
Functional requirments: 
    - what a program needs to do 
    - tends to be yes or no
Non-Functional requirments: 
    - The manner in which the functional requirements needs to be achived 
    - Performance, usability, maintainability 
    - Tend to be on a scale (htting the right code coverage)
Design contraints: 
    - statements the constrain the ways in which the software can be designed and implemented
    - Platform, language, DB, Webapp, GUI, etc. 

********************************************************************************
June 10th
Local respository (repo):
    - Local Git comandes:
        - git init: initializes local repository, In command pallet: Git init
        - git branch: create a new branch/version or copy, command pallet: Git branch/
        - git add: add a file/change to the staging area, Command pallet: Git add/ stage
        - git commit: commit changes (from stages) "commit message what the change is"
        - git merge: merge a branch into a target branch, CP: Git merge
        - git checkout: switch to a branch, CP: Git checkout
    - These are local git commands where no internet is needed to use
    - if I want to add a branch from my offline repo into the online/group repo than you would have to change into 
    develope option and then merge the offline branch into the online branch

Git Hub:
    - git hub is a server that host copy of your repositories, it is just used to get remote repositories,
    - branch protection: don't push into master you should pull and push request into the master branch
    - pull request is the same as merge that is only avalible on git hub, when you do a pull request you need 
    to include what it is/*name of branch* --what it is
    - it will not let you merge until a review is met and tests are passed, this is for group and reviews are 
    done by our LAs
    - Push: send your updated branch into your online repo, Pull: takes whats ever in your online repo and 
    brings it to your local repo
    - A pull request is only a git hub feature only
    - Work Flow: don't push to master, first you should push to feature branch and then to dev branch, master 
    branch is the last branch that should be pushed to
    - To go into master it need to pass travis and sonar with at least 95%, has to meet the definition of done, 
    and it has to RUN!!

Graphs:
    - How to use graphs:- networks/network topologies
                        - advance math
                        - functional programming
                        - machine learning - neural networks
                        - graph databases
Trypes of graphs: -Weighted and unweighted graphs:
                            - weighted, edges have 

    - directed and undirected graphes: - directed, you can only move along an edge in one direction
                                        - undirected, you can move along an edge in both directions
typical Graph functions: - add/remove vertex
                        - add/remove edge
                        - weighted?
                        - directed?
                        - Is conected? Given and vertex, can you get to any other vertex through legal edge movement
                        - can every vertex reach  every othe rvertex through a single edge traversal
                        - Does a path exists?
                            - does at least one path exist, find the shortest path from one vertex tot he other
                            - if a path between two vertices exist, find the shortest path from one vertex to the other
How we represent graphs: - List of linked lists
                        - each vertex is the head of a linked list (or a list, array , etc)
                            - the linked list holds their edges (and weights, if they exist)
                        - Matrix of vertices:
                            - row and column titles are the vertices
                            - row-column indices are edge weights (or edge existance)
                        - List vs matrix: - List: more common, usually easier to visialize/conceptualize, adding 
                        edges is slow, many algorithms are slow or very individualized
                            - Matrix: most algorithms are extremely fast in comparison, searches and traversals 
                            very mathematical, adding vertices is slow
                        - Library: - nextwork X (http//networkx.github.io/)
                            - graphs, digraphs, multigraphs
                            - well tested (>90% coverage)
                            - very 00 compliant

********************************************************************************
                                June 12th
What I did since last time:
    -I went on networkX webcite and went over the network package, more psecificly how to set up graphs with nodes 
    and edges and how networks would be set up usinf them
    -I also continued reading 5 dysfunctions of a team, about half way done with the book

What I will do for next time:
    -I will start working on our trello task once those are finished being set up
    -I will also continues reading 5 dysfunctions, trying to finish that by the weekend

Blockers:
    -The API isnt out yet and because of that we aren't sure what we should start programming, hopefully the API 
    will soon be released that way we are able to start working on things

Python notes:
    -A dictionary is a key value term, python is a multiple dictionary 
    -Python allows method refrences, thye are considered first class objects/ vakues
    -example the key word is "GO"  and the value would be food, once the key matches the value then it does something
        * EX; {"go", food}
             -{"Move", food}
    -When looking for a language look up why that language was made for, it will help you out a lot more and 
    make everything a lot better. 
    -

Non-functional requirement Examples
    -Performance
    -Real-time Performance
    -maintainability
        *readability
        *modualaritiy
        *debugability

Analysis:
    -Static; analyzing the (non running) code
        *Linters, cyclomatic complexity, method length, etc
        *Pylint, sonar cloud, radon, checkstyle

    -Dynamic; analyzing a running program
        *spotbug, valgrind, purify

Testing:
    -Acceptance; the customer saying this is what we asked for, when the requirments are met
    -Unit: method; test driven programs, write a test first and then the functunality, if you cant test your code 
    then how are you writting your code
        -write just enough code for it to pass (TDD), write a test then write the code that passes that test, 
        that you know what kind of code you are writting 
    -intergration: class; this is when you test the whole class, once we know the method works we have to 
    check and make sure the whole class works and passes the test
    -system; 

Unit Test:
    -Arguably the most important
    -many modern SE methods use"test first"
        -write a test
        -make sure it fails 
        -write just enough code to make sure it works
    -if you don't know how to test it, how can you write it
    -correct frame of mind 
    -Test-Driven 

Implementation
    -SE tends to focus on requirments, design and processes
    -a bad implementation will ruin everything else 

Guidelline: style
    -E.G.: The elements of java style by scott amber and trevor misfeldt
    management and leadership are 2 crutial for the indoustry 
    book recommendation good the great 

Guideline: naming
    -Use good descriptive names
    - Probably not hungarian notation
        -crszkvc 30lastNameCol: a constant refrence argument, holding the contents of a database column LastName 
        of type varchar(30) which is part of the tables primary key
        -type checking now done by IDE and compiler   

Guideline: test:
    -every method has unit test
    -Test must be easy to run and run a lot
        -E.g.: unit
    -TDD

Guideline: use libraries
    -Developed and tested by many others
    -Don't re implementation
        -you need to learn what is possible
        -yes, you may know how and think you're better, but you're not
        -Write something that no one else has written

Guideline: reviews
    -code reviews are very effective for improving quality
    -Knowing that someone else will be looking affects you
    -other things you don't know

Guidelines
    -We'll be covering other guidelines such as DRY, YAGNI, SOLID, Liskov substitution principle, etc.
    -Don't ever repeat code,

Agile:
    -Many different process that emphasize short release cycles and that allow changes in design
    -Focus on human and term aspects
    -Change is always inveritable, because code changes all the time 
    -short releases and iterations
    -incremental designUser involvement
    -lightweight documentation 
    -infromal communication 
    -change 
    -Give users the least amount of functionality and twords the end they will seee how much it grows and will be happier
    -Dont ever say im sorry, when the user changes their mind you say yes and... your change is going to have this affect 


********************************************************************************
                        June 13
Since last time: 
    -I started reading head first deign patters I also looked at command prompt designing on youtube, just 
    getting prepared to start programming

For next time: 
    -I will definitly look at Lukes files that he uploaded and get started on programming 
    - Finish 5 dysfunctions of a team and continue head first 

Blockers:
    -Not sure what my individual tasks are and where to start

TDD (Test Driven Design) example:
    -open folder/ create a new folder
    -creat new file with ".py" for a python project
    -creates a method that adds 2 strings together, "def AddString( one, two)
    -creater new file method/file named "testAddString" 
    -open it and add "def Test_addString():" -this will look for all files that starts with Test or Test_ 
    -Base case is when something is passed and nothing is returned 
    -SO we want nothing to be returned so need to create a 
    -the test we tried will not let us fail because python automactically will return none therefore the test will never fail
    -

********************************************************************************
                        June 17th
What I did since last time:
    -I read head first deign later
    -I started working on the movement for the game
What I will do for next time:
    -download network networkx
    -use it to generate graphs and grids
Blockers:
    -All personal things work and time related

Agile:
    -short releases and iterations
    -incremental design 
    -user involvement 
    -lightweight document 
    -informal communication 
    -change 
    -We never tell the customer no but we have to educate them on what the change means, as in the due date increased

*if someone gives you a glowing review with no weaknesses than you are in trouble, a balanced review is the best 

Why Agile:
    -lengthy development items
        -overall development time not reduced but many releases 
    -Difficulty in reponding to change requirements 
        -now change is expected and part of process
    -All requirments not understood at beginning
    -Too much reliance on heroic effort
    -Processes too complex
        -RUP: 100 tasks and 30 roles
        -Too much overhead
    -Too much waste and duplication
        -UML and code
        -Code now source of design, everything else doesn't matter only the code matters

Agile Promises:
    -finished product always avalible
    -Normal effort by team 
    -Deal with change 

What really matters? when it comes to developing software
    -"human interactions are complicated and never very crisp in their effects, but they matter more than 
    any other aspect of the work." -DeMarco and Lister
    -"Process and technology are a second-order effect on the outcome of a project. The first-order effect 
    is the people" -Cockburn

What to do?
    -how do we manage the teams that are required to produce software?
    -Process hasn't created what it promised
        -Smooth software development
    -People tend to want to control everything, controlling your enviornment
        -1) Add more process
        -2) when that doesnt work (which it can't), go back to 1)
    -If process were the answer, you'd think we'd've figured it out by now
        -if it were easy, it'd be done
    -Indeed, process can cause more problems than it solves
        -becomes cumbersome and slows progress

Manifesto for Agile Software Development 
    -we are uncovering better ways of developing software by doing it and helping others do it. Through 
    this work we have come to value:
        -indivuals and interactions over processes and tools 
        -Working software over comprehensive documentation
        -customer collaboration over contract negotitation
        -responding to change over following a plan 

Individuals and interactions over Processes and Tools 
    -Good process won't fix bad teams members
    -Bad process will hinder good team members 
    -Everyone must work together to succeed
    -Strong team memebers not necessarily strongest programmer, designer, etc.
        -Communication and interaction make for strong team members
    -Start small with tools and processes and only increase when truly needed
    -Don't create the environment first
    -Create the team and let them create environment

Working software over comprehensive documentation
    -Software without documentation is a disaster
    -Need to describe system and document design decisions
    -Large amount of documentation can become cumbersome and out of sync
    -knowledge transferred in the team by direct interaction
    -produce no documnet unless its need is immediate and significant

Customer Collaboration over contract negotiation:
    -Successful projects get customer feedback early and often
    -Best contracts specify how theam and customers interact 

Responding to change over following a plan:
    -Things change, all them time 
        -And you might as well accept it
        -And your customers will be happier with product
    -Team gains knowledge about problem 
    -Customers gain knowledge about solution
    -Detailed plans for next two weeks, plans for three months, crude after that 

        **That was the introduction to software engennerring**

Check router to see if UNPNP is off

********************************************************************************
                    June 19th
What I did since last time:
    -I strated using network networkX
    -I looked over yaml files 
    -working on maze and room generate 
What I will do for next time:
    -Continue working with networkX and using it to build graphs 
    -Pair program with my group to get our map/graph working and work on head first book
Blockers: 
    -I feel like I spend too much time studying and not enough time programming 

Design Patterns:

Wikipedia:
    -design patterns are formalized best practices that the programmer can use to 
    solve common problems when designing an application or system 
    
    Why talk about design patterns:
        -creates a shared vocabulary
            -developers can interact in richer terms
        -Keeps thinking/ designing at the abstract(pattern) level
            -Creates better (more flexible, reusable, etc.) designs 
Origin:
    -patterns originated as an architectural concept by Christopher Alexander (1977/79)
    -in 1987, kent Beck and Ward Cunningham began experimenting with the idea of applying patterns to programming 
    specifically pattern languages and presented their results at the OOPSLA confrence 
Chirstopher Alexander: -In software, Alexander is regulated as the father of the pattern language movement
    -A patteren language: towns, building, construction (1977) described a practical architectural system 
    in a form that a theoretical mathematician or computer scientist might call a generative grammar
    -The timeless way of building (1979)
    -Alexander's notes on the synthesis of form was said to be required reading for researchers in computer science 
    -Alexander's mathematical concepts and orientation were similar to E
Group and Concepts: 
    -Design patterns were originally grouped into the categories
        -creational patterns
        -strucural patterns 
        -behavioral Patterns
    -And described using the concepts of 
        -delegation
        -aggregation
        -consultation 
First design Principle:
    -Identify the aspects of your application that vary and separate them from what stays the same 
    -You can alter or extend without affecting other parts 
    -Basis of almost every design pattern 
    -Also creates more easily reusable objects 

Second design principle:
    -Program to an interface, not an implementation
        -Not necessarilly a java interface 
        -Program to a supertype
            --Private map< string, boolean> urls = new concurrentHashMap <String, boolean> ();
        -can then better use polymorphism
        -can more easily change implementation 

Third design principle:
    -favor composition over inheritance
    -favor has-a relationships over is-a relationships
    -inheritance limits reusability 

Strategy Pattern:
    -defines a family of algorithms, encapsulates each one, and makes them interchangeable
    -strategy lets the algorithm vary independtly from the clients that use it 
    -We dont really use UML as much as we used to before but we usually now use it for documentation

Chapter 2 in design book:

The observer Pattern:
    -defines a one to many dependency between objects so that when one object changes state, all 

    -The observer pattern is a software design pattern in which an object, called the subject, maintains a 
    list of its dependents, called observers and notifies them automatically of any state changes, usually by 
    calling one of their methods
    -It is mainly used to implement distributed event handling systems, in "event driven" software 
    -the observer pattern is also a key part in the design
    -this is a behaviour pattern because it depends on the relationship when a state changes something else will change

Design Principle:
    -Strive for loosely-coupled designs between objects that interact 
    -Objects have very little infromation about each other
    -No shared state 
Decoupling:
    -The observer pattern helps decouple objects
    -The sunject knowns only that the observer implements the observer interface
    -New observers can be added at any time
    -New types of observers can be added 
    -can reuse subjects and observers independtly 
    -changes have no affect on each other 
Warnings:
    -dont depend on order of evaluation of notifications 
    -java observable is a class 
        -not an interface 
        -must inherit 
        -set changed() is protected 

********************************************************************************
                        June 20th
                        Demo Day notes:
-If not everyone can read the code is trash code
-A good team is a steaddy team not a fast one 
-They are going to give us too much to do on purpose
-If you can't find what to do next contact product owner or customer 
-Mid term test:
    -scrum guide 
    -5 dysfunctions of a team
    -and all designs patterns that we  go over in class
    -Mid term June 27th 

********************************************************************************
                        June 24th
Since last time:
    -I become product owner 
    -Had a conversation with Dan (scrum master) and in what direction the team is going 
    -Finshed reading 5 dysfunctions
For next time: 
    -pair program for the cli 
    -study for the test based off head first design later
    -try and finish our product backlog 
Blockers:
    -No Blockers 

The Open/close principle
    -Designs shoulc be open for extension, but closed for modification 
Decorators:
    -Have the same super type of the objects they decorate
    -can have one or more Decorators
    -can pass wrapped object anywhere original could passed
    -adds behavior before and/or after delegating object 
    -Objects can be decorated at runtime 
-in python everything after "def" is an object 
-all variables are refrences in python 
-everything in python is an object 

The decorator Pattern:
    -attaches additional responsibilities to an object dynamically
    -provide a flexible alternative to sub-classing for extending functionality 
Inheritance:
    -using inheritance to get type matching but not behavior 
        -java requires this, other languages dont
-You can make decorators in java but it has to be through inheritance 

                    Chapter 4: The Factory Pattern:
Factories:
    -Hnadles the details of object creation 
        -encapsulates the creation in subclass
        -decouples interface from creation
    -can return a variety of types
    -can add additional types easily 
    -If static, can't subtype to extend 
Wikipedia def:
    -the factory method pattern is creational pattern that uses factory methods 
    to deal with the problem of creating objects without having to specify the exact class of the object that will be created
Absration:
    -Factories don't have to be abstract 
        -can have default and that can call down if necessary 
The dependency inversion principle:
    -depend upon abstractions
    -do not depend upon concrete classes 
Wikipedia def:
    -High level modules should not depend on low level modules 
        -both should depend on abstractions
    -abstractions should not depend on details
    Traditional view:
        Polocy view -----> mechanism layer ------> utility layer 
        (if one of them changes then you have to change all the other layers)
Therefore:
    -no variable should hold refrences to a concrete class 
    -no classes should derive from a concrete class
    -no method should override an implemented method of any of its base classes 
dependency Injection:
    -a technique whereby one object (or static method) supplies the dependencies of another object 
    -A dependency is an object that can be used (a service)
    -An injection is the passing of a dependency to a dependent object (a client) that would use it 
    -The service is made part of the client's state 
    -passing the service to the client, rather than allowing a client to build or find the service, is the fundamental
    requirement of the pattern 
    -this fundamental requirement means that using values (services) produced within the class from new or static 
    methods is prohibited
    -the client should accept values passed in from outside 
    -this allows the client to make acquiring dependencies someone else's problem
    -the intent behind dependency injection it to...
Inversion of control:
    -A design principle in which custom written portions of a computer program receive the flow of control from a 
    generic framework 
    -a software architecture with this design inverts control as compared to traditional procedural programming 
        -in traditional programming, the custom code that expresses the purpose of the program calls into reusable 
        libraries to take care of generic tasks 
        -With inversion of control, it is the framework that calls into the custom, or task-specific, code 
Abstract factory pattern:
    -provides an interface for creating families of related or dependent objects 
    -has the most complicated UML out of all the patterns 
Abstract vs Non:
    *Factory:
        -creation through inheritance
        -creates objects of a single type
    *Abstract factory:
        -creation through composition 
        -instantiated via new and passed 
        -creates families of related objects via factories 

                    #Chapter 5: The singleton
Need only one of:
    -thread pools, caches, dialog boxes, perferences, logging, device drivers, I/O 
    -But: might not need each time, so lazy initialization 
Pattern:
    -
Threading:
    -synchronize get
*double checked locking
Visibilty and synchronized:

Volatile: 
    -reads and writes happen to main memory 
        -not from individual CPU caches 
    -writes to a volatile also write all the thread 
Atomic:
    -any write to a volatile variable 
    -reads and writes are atomic for refrences variables and for most primitive variables (except long and doubles)
    -reads and writes are atomic for all variables decleared volatile (including long and double variables)
Volatile now always enough:
    -if there is a read/modify/
    (a good book for OS twords the end of the semester Java concurrency in prectice by Brian Goetz )

    ********************************************************************************
                                June 26th
For the test look at the design book, remember patterens are based off the principles

Chapter 6:
    Command Pattern:
        -A behavioral design pattern in which an object is used to encapsulate...
    Participants:
        -client is responsible for creating a concrete command and setting its receiver
        -Invoker holds a command object 
        UML:
        caller-----> command <----concrete command ----> receiver <------client
                                        ^                                   |
                                        |                                   |
                                        |------<--------<----------<---------

Chapter 7:
    The adapter patttern:
        -converts the interface of a class into another interface the clients expect 
        -adapter let classes work together that couldn't otherwise because of incompatible interfaces 
    two types:
        -object adapters 
        -
        UML: client to target, adapter to target, adapter to adaptee 
        *the only question would be, are we going to a class or object?
    facade:
        -provides a unified interface to a set of interfaces in a subsytem 
        -facade defines a higher level interface that makes the subsystem easier to use 
    *the maindifference between a facade and adapters is that facades have more things going on behind the curtons 
    while adapters are pretty straight forword
    difference:
        -adapters alter and interface 
    Principle of least knowledge:
        -talk to only immediate friends 
        -decouples
        -methods may talk to 
            -their own object 
            -objects passed as parameters 
            -objects they instantiate 
            -instance variables

Chapter 8 templete:
    Wikipedia:
        -behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses
        -it lets one redifine 
    UML:    abstract class (template method) <-------- sub classes 
    a template is just when a class uses subclasses 
    Hot beverage:
        -for both coffee ad tea
            -boil water(same, in base class)
            -use hot water to extract (different, abstract in base classes)
            -pour into cup (same)
            -add condiments (different)
        -preparedRecipe is template method 
            -preparedRecipe method
                -is template class
        Hooks:
            -can define concrete methods that do nothing unless subclass overrides them 
            -use abstract when subclass must implement, hooks when optional 
        Hollywood principle:
            -Don't call us, well call you
            -Low-level hooks into system , high level calls at the appropriate time
            -java Arrays.sort calls compareTo()
    Summary:
        -To prevent subclasses from changing the algorithm, make the template method final 
        -both the strategy and template patterns encapsulate algorithms 
            -strategy via composition 
            -template via inheritance
        -factory is very specialized template
            -returns result from subclass 
            -factory pattern is a creational template 

********************************************************************************************
                                    July 1st
 Since last time:
    -I paired program, first with mat and greg just going over test
    -Then with casey dan and david over the maze generator and see where I can help them 
For next time:
    -I'll get with the group and disscuss with the dan (scrum master) on what we need to do to get ready for demo day 
Blockers:
    -none 
//If you can test your code its not good code //
it has to be 95% or better to be presented on demo day

    Design Pattern Chapter 09:
Iterator pattern:
    -provides a way to access the elements of an aggregate object sequentially without exposing the underlying representation 
    -this places the task or traversal on the iterator object, 

Java:
    -enumeration is the older that has been replaced by iterator 
        -iterator allows removal

Design Principle:
    -A class shuold only have 1 reason to change
        -Single reponsibility principle 
    -High Cohesion 
        -All methods related to purpose
Composite Pattern:
    -allows you to compose objects into tree structures to represent part/whole hierarchies
    -Composite allows clients to treat individual ojects and compositions of objects uniformly 
    -We can apply the same operations over both composites and individual objects 
    -can ignore difference between the two
    -think recursion 
    -aggregasion is funcionality to corrct its somehting that wre already tere and os know.
        give them up to 100 so wenow what is ec ectied 
Part/Whole:
    -animals, manmalsl, dogs....
        -relasstionshsip, locomotion
        Design Patterns Chapter 10: The state pattern 
State: 
    -the combination of the value of all the variables in an object
    -We use state machines all the time
        -We use state machines all the time 
    -Automata:
        -combinatoerial  logic 
        -FSMR 
    -Vending machines, elevator, locks, traffic, lights, etc
    -FSMs limited to the amount of 
State Patter:
    -allows an object to alter its behaviour when its internal sate changes 
    -the object will aprear to change its class
    -very similarand display a new form of words
    -Decarator pattern is from baily 

********************************GETTING A JOB**********************
The Great American know who:
    -I've known people at many jobs
    
#1 thing to do is:
    -maintaining your GPA is the #1 thing you can do 
    -Impressing people in your classes is the other #1 thing you can do 
Linked In:
-frickin' join it
    -it's free 
    -it's a good way to network 
    -They send you jobs that match your skills 
    -Pulse is usually pretty good 
    -Recruiters rely on it heavily 
Meet Up: 
    -frickin join it 
    -find a meetup that matches your intrests in a job 
    -would it kill you to interact with people you don't know? 
        -and talk about things you and they are intreseted in
    -DJUG 
        -use to meet up and help you talk to recruiters  
        - https://www.meetup.com/DenverJavaUsersGroup 

Twitter:
    -maybe join it 
    -Don't just retweet or like 
    -Follow those whom you're intrested in 

STOP:
    -Gaming 
        -your WOW, maden, fps friends aren't going to hire you 
        -and they don't make you a coach, shooter, etc.
        -get off the couch 
    -Social Media
    -Watching your favorite sportsball 
    -wasting your time 
        -time is really all we have 
    -Everyone is an expert at something 
        -but does anyone wanna pay you for it
        -choose 

START: 
    -learning about your field
        -AMC, IEEE 
    -Being relatable 
        -be able to interact with non geek
    -being nice 
    -braching out
        -new language etc. 

Why is anyone hired:
    -because someone is willing to pay to have a solution to their problem 
    -be the solution (this is the sectret), same reason we hire people to fix our solution 

Do the job before you get the job 
    -do research on the company and the position 
    -What tech do they use 
    -whom have they nought and been bought by 
    -their solution 

Market yourself 
-Print up some cards
    -include
        -a non-school email address 
        -your twitter, linked-in, github urls 
-GitHub 
    -your school work 
    -Gists 
-Blog 
-create and give a presentation or two 
-write a paper or two 

Resumes: 
    -Your resume will first be filtered by an HR program be buzzword compliant 
    -You have 5 seconds to catch someones attention 
        -important stuff first 
    DONT:
        -put your address 
            -you're willing to commute or WFH 
        -Use your school email address 
        -have a cute email address or funny/gamer github login 
        -list your rewuired courses 
            -but do list your electives 
        -list your ides 
        -mention desktop applications 
        -put in objectives 
            -your objective is to get a job 
            -objectives and targeted info can go in a cover letter 
            -objectives don't solve their problems 
    DO: 
        -put in your GitHub and LinkedIn URLs
        -List your languages, either in order(or with level)
        -list scrum, github, design patternes, TDD, travis(CI/CD), sonar cloud 
        -mention linux 
        -say what you role was and what you actually accomplished 
            -not what you were "responsible" 
            -No say what you did /accomplishments  
            -1 page for entry level jobs 
        -be very careful with spelling, grammer, and formatting
            -don't change fonts, justification, etc. 
    Interviewing: Many Kinds
        -typically start with phone screen 
        -possibly followed by an online quiz 
        -may be half-or full-day
        -may be interviewed by group
            -or individuals 
            -or mix 
        -typically have to eat with them 
            -learn some tables manners 
        
Overall:
    -Arrive at least 15 minutes early, but enter 8-10 minutes early 
    -Bring a notepad and make if necessary 
    -bring extra Resumes
    -follow Up:
        -the same day 
        -Say thanks, you know how much it is, if there is anything else you can provide to help
        -following up with the hiring manager that same day to say thank you for taking time out htere day  
Personal:
    -Dress well
    -Eye contact 
    -Body Language 
        -Don't cross your arms or legs 
        -lean in 
        -Avoid your nervous habits 
    -Don't wear Axe 
        -many people sensitive/allergic to artificial 
    
What you want:
    -You're interviewing them as much as they you 
        -You don't want to work for just any place 
        -Unless you can grit your teeth for a year and build your resume 
        -Maybe check out https://ww.glassdoor.com/ 
            -people reviews their work place 
        join msu lindin to see about any question that come
        if they ask about salary say that you know its a competetive feild and that your main priority is ______
    -Working at some places is the worse than not working in the field for a time 
        -trailing edge technology that traps you 
        -A place you can't excel in 
        -Churn and burn 
        -Try ACM its a research peper that revolves around new technology / the game field 

********************************************************************************************
                                    July 8th
Since last time:
    I worked on writting our game script, also met with the team and talked about merging our cli and game engine together 

For next time:
    I will meet with out team and talk about the solutions that we can come up with to merge our program parts 

Blockers: -none

User Story break down:
    "As a user I want rooms to be able to hold item by the player and room" 
    break it down to 2 item holders, 
        Room: 
        break it back up since it is also a big task 
        -test for excistance 
        -add to list 
        -remove from list 
        -load list 
        -save to room 

        PLayer: cannot implement a player to hold items in less than 3 hours with testing, break it down more 
        -test for uniqueness [3]
        -add to list [2]
        -removal from list [2] 
        -original estimate was 5 hours but it turned into a 7 hour projrct 

        Item: we need to add a spike since we don't know what some of these things are 
        -spike-research save / load 
            -put on backlog [1]
            -finish breading up later [2] 


        Room -----------------------------------------> Items ----------------------------> Player 
        |                  0-n 
        |
        |
        Player              

How to get a job continued...

what you want:
    Working at some places is wore than not working in the field for a time
        -trailing edge technology 

What to ask:
    -why do you work here?
    -What are working conditions?
    -What SE lifecycle is used?
    -What is the tool chain?
    -HR 
        -how are the benefits 
            -health, vacation, retirement 

Types of QUestions:
    -computer science:
        -algorithms and data structures 
        -O of algorithms and choosing 
        -Imperative vs functional
        -www://www.nerdparadise.com/te..

What have you done: 
    -Make sure you did what is on your resume are ready to talk about 
    -They are looking for specifics 
    -Give a concrete example 
    -If you don't have an example, say so 

-This is known as the star methods 

Languages: 
    -when would you use an anonymous inner class in java 
    -what's a lambda?  *they are nameless functions 
        -KNow your versions 
    -Whats a closure
        - a refrence to a ____ method that can be called when 

OOPSLA  
    -what are the major functions of OO?
        -abstraction, encapsulation, inheritance, polymorpjism 
    -what is an interface 
    -what is a virtual method 
    -Deep vs shallow copies 
    -Dependency inversion/inversion of control 
        -framework 
    -design patterns 

Do me a SOLID 
    -S;  Single responsibilities 
        -classes do 1 thing 
    -O; open-closed principle 
        -open extenstion 
    -L;
    
    -I; interface segregation principle

OS: -Concurrency 

Networks: -IP v4 addressing 
    -TCP vs. UPD 

Software Engineering 
    -Git, Github 
    -Angile Manifesto 
    -TDD 
    -Dry, 

Web 
    -MVC 
    -ORM 
    -Ajax 

Questions
    -why are manhole covers round? 
    -What is 2^24 
    -How usable addressing in a class C network? 
    -What are your strengths and weaknesses 
        -no kidding 
    -Why do you want to work here
        -intreseted in their technology, something, you would like to increase your development skills 

Tough Questions 
    -They typically will ask a few very difficult questions 
        -to show off 
        -to see how you reason 
    -How many trees are in CONUS 
    -How far away is the moon 

Verbal Hints
    -we speak not only to tell other people what we think, but to tell outselves what we think. 
    -dont say "I fell like"  I think is what you have to say 
        -no one cares how you feel 
        -you hopefully mean "i think" or "I belive"  
    -try to avoid "like"
        -unless you are making a simile
        -also "um", "you know" and "got"
    -don't use "literally"
        -unless you almost always talk f
    -Irregardless is not a word
        -regardless is 
        -irrespective is 
    -Don't say methodology 
    -the word DATA is plural 
    -Don't make jokes 
    -Don't BS 
Guerrilla Interviewing: 
    -Looking for smart people who get things done 
    -Introduction 
    -Question about recent project candidate worked on 
    -Easy Programming Question 
    -Pointer/Recursion Question 
    -Do you have any questions? 
Some Typical: 
    -PLease tell me about yourself 
    -What makes you intrested into this place 
    -WHy did you choose this field 
    -Resources https://
    Cracking the coding interview is a book that is highly reccomened 
    -they cant tell you why they didn't hire you 

    interview support 
    -security plus will help you 
    -you just have to differentuace yourself 
    -gotta show that you are bteer than the other person 
    -AWS certification is really helpful to have 
    -

    -if you cant say it in 2 complete sentences then you don't know it 
    -Molly Weller is incharge of COMPSCI for internship 

********************************************************************************************
                                July 10th 
What I did since last time:
    -continued trying to connect our cli to our map, as well as reworking our cli the way luke reccomeneded 

What I will do:
    -Meet with my group see where we need to be at and what I can do to help 

Blockers:
    -None 

EFfective Java Book:            Chapter 2

Consider static factory methods instead of Constructors
    -One advantage is they have names 
        -Constructors do not and one has to differentiate via parameters 
        -This can be confusing and lead to errors 
    -A class can have only one constructor with a given name 
        -Don't change order of constructor parameters to differentiate 
    -Static factory methods dont have to create a new object 
        -Constructors always do 
        -Maybe there's an object already created that works 
        -Helps with immutable classes and pre-constructed instances 
    -Singletons, flyweights, non-instantiable 
    -Can return a subtype 
        -java util.collections contain all static methods that work on many types 
        -polymorphic 
        -addAll, binarySearch, disjoint, frequency, min, max, sort, shuffle, reverse 
        -type returned can be non-public 
        -Can vary implementation 
    -Returned class need not exist at the time the class is written 
        -Allows run-time specification 
        -JDBC an example 
Service Provider framwork 
    -Service interface 
    -Provider registration 
    -service access 
    -Optinal service provider interface 
        -factory to create service provider 
Java 6
    -General purpose java.util.ServiceLoader
        -SO you don'thave to write your own interface 
Consider Static Factory Methods Instead of Constructors 
    -Disadvantages 
        -classes without public or protected constructors cannot be sub-classed 
        -not called out in Javadoc 
    -Popular Java static factory names 
        -valueOf, getinstance, newinstance, getType 
Consider a builder when faced with many constructor parameters 
    -If a class has many fields that need initializing 
    -create empty instance and have many set()s 
        -problem: instance in inconsistent state 
    -builder pattern, pretty much a decorator 
    -build() is parameters-less static mehod 
    -required parameteres passed in to constructor 
        -optionals set ()
        -other languages have optional parameters instead 
-Consider using builers they are much easier than constructors 

Chapter 2 is park of the book that go inot detail about private and they do too into detail 
-if we return an internal class it will also only be inplemented in the history class  
-You might always want final inside your prarameters because thats what you most likely mean 
-You can also create a private no-Arg constructor (private no argument)
    -to prevent that create a private no paramenter constructor 

Enforce NOn-instantiability with private constructor 
    -just have a private no-args constructor 
        -if have any no args constructors, the default

********************************************************************************************
                                        July 11th
Since last time:
    -I started working on test on our new CLI 
For next time:
    -I will continue writting test for our CLI 
Blockers: 
    -None 

Perfer dependency Injection:
    use a spell checker that also checks for multiple languages like england english, austrilia english etc. 
    -helps preserve immutability 
    -Works for constructors, factories, and builders 
    -can pass factory into constructor
        -Mosaic create (supplier < ? extends tile > titlefactory)
    -Use DI framework 
Avoid Creating Unnecessary Objects 
    -Use literals and ValueOf()
    -Anyhthing thta is immutable 
    -Anything that is stateless 
        -E.g.: adapters 
    -Stack memory error 
    *the main difference between java and C++  is that c++ supports multiple inheritance and oporator overload while java doesnt 
    -IN java when you have a mempry leak happens all you really gotta do is just null the the array or 
    what ever the garbage collection is trying to throw away. Nulling it make it reach xero a lot faster 
So:
    -try very hard to not manage memory 
    -Nulling object refrences should be very unusual 
Avoid Finalizers:
    -Unpredictable, often dangerous, generally unnecessary 
    -Unlike C++ destructions 
        -these are called immediately 
        -Java uses try/finally for these types of uses
    -One never knows when a finalizer is called 
        -part of garbage collection 
        -Might not be called at all 
    -Don't e.g. close files as there is a limited number of open files 
    -Finalizers are slow 
    -Finalizers are not chained 
    -If really need funtionality 
    -there are finalizer attacks 
        -crrate final finalize method to protect 
    -Implement AutoClosable 
        -Have to have close method 
        -Used with try-with-resources statements 

                    // End of chapter in java book//

                   //Chapter 3: methods common to all objects //
    
Obey the general contract when overriding equals:
    -Sometimes, you dont need to
        -When all object are unique, such as threads 
        -when you don't need it, such as with random number generators 
        -Superclass equals works well, such as sets, lists, and maps getting from AbstractList etc. 
    
When to implement:
    -When logical equality (.equals) is different from simple object identity (==)
    -This is the typical case as classes have state, kept by variables with values 
    -Test for equivalence, not the smae object 
    -When we need the class to be map keys or set elements 
Must implement an Equivalence relation 
    -Must be reflexive: x.equals(x) must return true 
    -Must be symmitric 

**Something to consider when using a .equals method in java 

Non - Transitivie 
    non-transitive 

So:
    -ther is no way to extend an instatiable class and add a value while preserving the equals contract 
    -You can safely add values to a subclass of abstract class 




